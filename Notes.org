* Karl Berry
My understanding is that nowadays makeinfo (aka texi2any) reads and
parses the input file(s) into trees, possibly transforms those trees in
various ways, and then outputs the requested format(s). Thus, line 1120
of texi2any.pl is:
  my $tree = $parser->parse_texi_file($input_file_name);
Bunches of possible $tree transformations follow, then at line 1276:
  $converter->output($tree);

This applies for html, info, etc., but PDF or DVI. Those are handled
completely differently, by exec-ing texi2dvi at the end of
texi2any.pl. And texi2dvi is just a shell wrapper around [pdf]TeX (to
rerun enough times to resolve cross-references plus endless
configuration hassles, basically).

* Patrice Dumas
There is first a conversion into an abstract in-memory representation,
then processed to an HTML (or Info or XML...) structure. However, the
first conversion (we call it the parser) is now coded in C, interfaced
with perl, while the final conversion to HTML is in perl, such that
the final conversion could take much longer.

For PDF, it is completly different, TeX is used to create pdf, and is
probably much more rapid.

* Gavin Smith
I expect that CPU usage is much more significant than I/O speed,
especially for large input files. However, I haven't measured it.

There is not any pararallism in texi2any, although in theory I don't
see why there couldn't be in the output phase - it would depend on how
easy it was to implement that in Perl.
